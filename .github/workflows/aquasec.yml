name: build
on:
  push:
    branches:
      - main
jobs:
  all-in-one:
    name: Aqua scanner
    runs-on: ubuntu-latest
    environment: saemea
    env:
   #   AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
   #   ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
   #   ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ github.sha }}
      AQUA_KEY: ${{ secrets.AQUA_KEY }}
      AQUA_SECRET: ${{ secrets.AQUA_SECRET }}
      TRIVY_RUN_AS_PLUGIN: 'aqua'
      
    permissions:
        id-token: write
    
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 32768 # The Go cache (`~/.cache/go-build` and `~/go/pkg`) requires a lot of storage space.
          remove-android: 'true'
          remove-docker-images: 'true'
          remove-dotnet: 'true'
          remove-haskell: 'true'
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Aqua scanner
        uses: docker://aquasec/aqua-scanner
        with:
          args: trivy fs --scanners misconfig,vuln,secret . --sast
          # To customize which severities to scan for, add the following flag: --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          # To enable SAST scanning, add: --sast
          # To enable reachability scanning, add: --reachability
          # To enable npm/dotnet/gradle non-lock file scanning, add: --package-json / --dotnet-proj / --gradle
        env:
          AQUA_KEY: ${{ secrets.AQUA_KEY }}
          AQUA_SECRET: ${{ secrets.AQUA_SECRET }}
          GITHUB_TOKEN: ${{ github.token }}
          AQUA_URL: https://api.asia-1.supply-chain.cloud.aquasec.com
          CSPM_URL: https://asia-1.api.cloudsploit.com
          TRIVY_RUN_AS_PLUGIN: 'aqua'
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: "arunrana1214/demo-vuln-genai:${{ github.sha }}"
    #  - name: Build image locally
    #    run: |
    #      docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
    #  - name: Configure AWS credentials
    #    uses: aws-actions/configure-aws-credentials@v2
    #    with:
    #      role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
    #      aws-region: ${{ secrets.AWS_REGION }}
          #role-session-name: GitHubActions
      - name: Manifest Generation
        run: |
          export BILLY_SERVER=https://billy.asia-1.codesec.aquasec.com
          curl -sLo install.sh download.codesec.aquasec.com/billy/install.sh
          curl -sLo install.sh.checksum https://github.com/argonsecurity/releases/releases/latest/download/install.sh.checksum
          if ! cat install.sh.checksum | sha256sum --check; then
          echo "install.sh checksum failed"
          exit 1
          fi
          BINDIR="." sh install.sh
          rm install.sh install.sh.checksum
          ./billy generate \
            --access-token "${{ secrets.GITHUB_TOKEN }}" \
            --aqua-key "${{ secrets.AQUA_KEY }}" \
            --aqua-secret "${{ secrets.AQUA_SECRET }}" \
            --cspm-url https://asia-1.api.cloudsploit.com \
            --artifact-path "arunrana1214/demo-vuln-genai:${{ github.sha }}" 

            # The docker image name:tag of the newly built image
            # --artifact-path "my-image-name:${{ env.tag-version }}" 
            # OR the path to the root folder of your project. I.e my-repo/my-app 
            # --artifact-path "${{env.MY_APP_ROOT}}"
   #   - name: Login to Amazon ECR
   #     id: login-ecr
   #     uses: aws-actions/amazon-ecr-login@v1
   #   - name: Tag and push image to Amazon ECR (+latest)
   #     run: |
   #       docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
   #       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
   #       docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
